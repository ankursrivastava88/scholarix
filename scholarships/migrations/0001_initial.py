# Generated by Django 5.2.6 on 2025-09-17 18:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('provider', models.CharField(max_length=200)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Scholarship amount in INR', max_digits=10)),
                ('is_fully_funded', models.BooleanField(default=False, help_text='If fully funded, amount will be ignored')),
                ('min_cgpa', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('eligible_education_levels', models.JSONField(default=list, help_text='List of eligible education levels')),
                ('eligible_fields_of_study', models.JSONField(default=list, help_text='List of eligible fields of study')),
                ('eligible_caste_categories', models.JSONField(default=list, help_text='List of eligible caste categories')),
                ('min_family_income', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum family income in INR (if applicable)', max_digits=10, null=True)),
                ('max_family_income', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum family income in INR (if applicable)', max_digits=10, null=True)),
                ('eligible_states', models.JSONField(default=list, help_text='List of eligible states (empty for all-India)')),
                ('application_deadline', models.DateField()),
                ('application_link', models.URLField()),
                ('is_active', models.BooleanField(default=True)),
                ('scholarship_type', models.CharField(choices=[('MERIT', 'Merit-based'), ('MEANS', 'Means-based'), ('SPORTS', 'Sports'), ('MINORITY', 'Minority'), ('GENDER', 'Gender-specific'), ('DISABILITY', 'For disabled students')], max_length=20)),
                ('tags', models.JSONField(default=list, help_text='Tags for better categorization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-application_deadline'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1)),
                ('current_education_level', models.CharField(max_length=100)),
                ('field_of_study', models.CharField(max_length=100)),
                ('institution_name', models.CharField(max_length=200)),
                ('current_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('cgpa', models.DecimalField(decimal_places=2, max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('caste_category', models.CharField(choices=[('GEN', 'General'), ('OBC', 'Other Backward Class'), ('SC', 'Scheduled Caste'), ('ST', 'Scheduled Tribe'), ('EWS', 'Economically Weaker Section')], max_length=3)),
                ('family_income', models.DecimalField(decimal_places=2, help_text='Annual family income in INR', max_digits=10)),
                ('state', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=10)),
                ('disabilities', models.TextField(blank=True, help_text='List any disabilities (if applicable)', null=True)),
                ('extracurricular_activities', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScholarshipMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eligibility_score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('match_reason', models.TextField(help_text='AI-generated explanation of why this scholarship is a good match')),
                ('is_applied', models.BooleanField(default=False)),
                ('application_date', models.DateTimeField(blank=True, null=True)),
                ('application_status', models.CharField(choices=[('NOT_APPLIED', 'Not Applied'), ('IN_PROGRESS', 'Application in Progress'), ('SUBMITTED', 'Submitted'), ('AWARDED', 'Awarded'), ('REJECTED', 'Rejected')], default='NOT_APPLIED', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('scholarship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='scholarships.scholarship')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='scholarships.studentprofile')),
            ],
            options={
                'verbose_name_plural': 'Scholarship Matches',
                'unique_together': {('student', 'scholarship')},
            },
        ),
    ]
